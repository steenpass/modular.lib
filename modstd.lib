////////////////////////////////////////////////////////////////////////////////
version="$Id: modstd.lib 14375 2011-08-23 09:29:47Z steidel $";
category = "Commutative Algebra";
info="
LIBRARY:  modstd.lib      Groebner basis of ideals

AUTHORS:  A. Hashemi      Amir.Hashemi@lip6.fr
@*        G. Pfister      pfister@mathematik.uni-kl.de
@*        H. Schoenemann  hannes@mathematik.uni-kl.de
@*        A. Steenpass    steenpass@mathematik.uni-kl.de
@*        S. Steidel      steidel@mathematik.uni-kl.de

OVERVIEW:

  A library for computing the Groebner basis of an ideal in the polynomial
  ring over the rational numbers using modular methods. The procedures are
  inspired by the following paper:
  Elizabeth A. Arnold: Modular algorithms for computing Groebner bases.
  Journal of Symbolic Computation 35, 403-419 (2003).

PROCEDURES:
 modStd(I);        standard basis of I using modular methods (chinese remainder)
 modS(I,L);        liftings to Q of standard bases of I mod p for p in L
 modHenselStd(I);  standard basis of I using modular methods (hensel lifting)
";

LIB "poly.lib";
LIB "ring.lib";
LIB "modular.lib";

////////////////////////////////////////////////////////////////////////////////

proc mixedTest()
"USAGE:  mixedTest();
RETURN:  1 if ordering of basering is mixed, 0 else
EXAMPLE: example mixedTest(); shows an example
"
{
   int i,p,m;
   for(i = 1; i <= nvars(basering); i++)
   {
      if(var(i) > 1)
      {
         p++;
      }
      else
      {
         m++;
      }
   }
   if((p > 0) && (m > 0)) { return(1); }
   return(0);
}
example
{ "EXAMPLE:"; echo = 2;
   ring R1 = 0,(x,y,z),dp;
   mixedTest();
   ring R2 = 31,(x(1..4),y(1..3)),(ds(4),lp(3));
   mixedTest();
   ring R3 = 181,x(1..9),(dp(5),lp(4));
   mixedTest();
}

////////////////////////////////////////////////////////////////////////////////

proc redFork(ideal I, ideal J)
{
   if(reduce(I, J, 1) == 0)
   {
      return(1);
   }
   else
   {
      return(0);
   }
}

////////////////////////////////////////////////////////////////////////////////

proc isIncluded(ideal I, ideal J)
"USAGE:  isIncluded(I,J); I,J ideals
RETURN:  1 if J includes I,
@*       0 if there is an element f in I which does not reduce to 0 w.r.t. J.
EXAMPLE: example isIncluded; shows an example
"
{
   attrib(J,"isSB",1);

   list args;
   int i;
   for(i = ncols(I); i > 0; i--)
   {
      args[i] = list(I[i], J);
   }
   return(parallelTestAND("redFork", args));
}
example
{ "EXAMPLE:"; echo = 2;
   ring r=0,(x,y,z),dp;
   ideal I = x+1,x+y+1;
   ideal J = x+1,y;
   isIncluded(I,J);
   isIncluded(J,I);

   ring R = 0, x(1..5), dp;
   ideal I1 = cyclic(4);
   ideal I2 = I1,x(5)^2;
   isIncluded(I1,I2);
}

////////////////////////////////////////////////////////////////////////////////

static proc liftstd1(ideal I)
{
   def R = basering;
   list rl = ringlist(R);
   list ordl = rl[3];

   int i;
   for(i = 1; i <= size(ordl); i++)
   {
      if((ordl[i][1] == "C") || (ordl[i][1] == "c"))
      {
         ordl = delete(ordl, i);
         break;
      }
   }

   ordl = insert(ordl, list("c", 0));
   rl[3] = ordl;
   def newR = ring(rl);
   setring newR;
   ideal I = imap(R,I);

   intvec opt = option(get);
   option(none);
   option(prompt);

   module M;
   for(i = 1; i <= size(I); i++)
   {
      M = M + module(I[i]*gen(1) + gen(i+1));
      M = M + module(gen(i+1));
   }

   module sM = std(M);

   ideal sI;
   if(attrib(R,"global"))
   {
      for(i = size(I)+1; i <= size(sM); i++)
      {
         sI[size(sI)+1] = sM[i][1];
      }
      matrix T = submat(sM,2..nrows(sM),size(I)+1..ncols(sM));
   }
   else
   {
      //"==========================================================";
      //"WARNING: Algorithm is not applicable if ordering is mixed.";
      //"==========================================================";
      for(i = 1; i <= size(sM)-size(I); i++)
      {
         sI[size(sI)+1] = sM[i][1];
      }
      matrix T = submat(sM,2..nrows(sM),1..ncols(sM)-size(I));
   }

   setring R;
   option(set, opt);
   return(imap(newR,sI),imap(newR,T));
}
example
{ "EXAMPLE:"; echo = 2;
   ring R = 0,(x,y,z),dp;
   poly f = x3+y7+z2+xyz;
   ideal i = jacob(f);
   matrix T;
   ideal sm = liftstd(i,T);
   sm;
   print(T);
   matrix(sm) - matrix(i)*T;


   ring S = 32003, x(1..5), lp;
   ideal I = cyclic(5);
   ideal sI;
   matrix T;
   sI,T = liftstd1(I);
   matrix(sI) - matrix(I)*T;
}

////////////////////////////////////////////////////////////////////////////////

proc modpStd(ideal i, int variant, list #)
"USAGE:  modpStd(I, variant, #); I ideal, variant integer
ASSUME:  If size(#) > 0, then #[1] is an intvec describing the Hilbert series.
RETURN:  ideal - a standard basis of I mod p, integer - p
NOTE:    The procedure computes a standard basis of the ideal I.
         If size(#) > 0 the Hilbert driven
         standard basis computation std(.,#[1]) is used instead of groebner.
         The standard basis computation also varies depending on the
         integer variant, namely
@*       - variant = 1: std(.,#[1]) resp. groebner,
@*       - variant = 2: groebner,
@*       - variant = 3: homog. - std(.,#[1]) resp. groebner - dehomog.,
@*       - variant = 4: fglm.
"
{
   option(redSB);

   if(variant == 1)
   {
      if(size(#) > 0)
      {
         i = std(i, #[1]);
      }
      else
      {
         i = groebner(i);
      }
   }

   if(variant == 2)
   {
      i = groebner(i);
   }

   if(variant == 3)
   {
      list rl = ringlist(@r);
      int nvar@r = nvars(@r);

      int k;
      intvec w;
      for(k = 1; k <= nvar@r; k++)
      {
         w[k] = deg(var(k));
      }
      w[nvar@r + 1] = 1;

      rl[2][nvar@r + 1] = "homvar";
      rl[3][2][2] = w;

      def HomR = ring(rl);
      setring HomR;
      ideal i = imap(@r, i);
      i = homog(i, homvar);

      if(size(#) > 0)
      {
         if(w == 1)
         {
            i = std(i, #[1]);
         }
         else
         {
            i = std(i, #[1], w);
         }
      }
      else
      {
         i = groebner(i);
      }

      i = subst(i, homvar, 1);
      i = simplify(i, 34);

      setring @r;
      i = imap(HomR, i);
      i = interred(i);
      kill HomR;
   }

   if(variant == 4)
   {
      def R1 = changeord("dp");
      setring R1;
      ideal i = fetch(@r,i);
      i = std(i);
      setring @r;
      i = fglm(R1,i);
   }

   return(i);
}

////////////////////////////// main procedures /////////////////////////////////

proc modStd(ideal I, list #)
"USAGE:  modStd(I); I ideal
ASSUME:  If size(#) > 0, then #[1] is an optional parameter for the exactness
         of the computation. If #[1] = 1 (default), the procedure computes
         a standard basis of I for sure; if #[1] = 0, it computes a standard
         basis with high probability.
@*       The remaining optional parameters are passed directly to
         @ref{modular}. Please refer to the corresponding manual page for more
         details.
RETURN:  a standard basis of I if no warning appears;
NOTE:    The procedure computes a standard basis of I (over the rational
         numbers) by using modular methods.
         The procedure distinguishes between different variants for the standard
         basis computation in positive characteristic depending on the ordering
         of the basering, the parameter #[1] and if the ideal I is homogeneous.
@*       - variant = 1, if I is homogeneous,
@*       - variant = 2, if I is not homogeneous, 1-block-ordering,
@*       - variant = 3, if I is not homogeneous, complicated ordering (lp or
                        > 1 block),
@*       - variant = 4, if I is not homogeneous, ordering lp, dim(I) = 0.
@*       To control the number of available processors for the
         computation, which was possible by adding an optional parameter
         in previous versions of modStd(), please refer to Singular's
         @ref{resources.lib}.
EXAMPLE: example modStd; shows an example
"
{
//-----------------------------  Preliminaries  --------------------------------
   def R0 = basering;
   list rl = ringlist(R0);
   if((npars(R0) > 0) || (rl[1] > 0))
   {
      ERROR("Characteristic of basering should be zero, basering should
             have no parameters.");
   }

   int i;

//--------------------  Initialize optional parameters  ------------------------
   int exactness = 1;
   list modoptions;

   if(size(#) > 0)
   {
      if(typeof(#[1]) != "int")
      {
         ERROR("wrong optional parameters");
      }
      exactness = #[1];
      modoptions = delete(#, 1);
   }

   if(printlevel >= 10)
   {
      "exactness = "+string(exactness);
   }

//-------------------------  Save current options  -----------------------------
   intvec opt = option(get);

   option(redSB);

//---------------------  Decide which variant to take  -------------------------
   int P = prime(random(1000000000, 2134567879));
   int h = homog(I);

   int variant = variant_std(I, h, exactness, P);

   if(printlevel >= 10)
   {
      "variant = "+string(variant);
   }

   if(variant == 0)
   {
      return(groebner(I));
   }
   if(variant == 1)
   {
      rl[1] = P;
      def @r = ring(rl);
      setring @r;
      def @s = changeord("dp");
      setring @s;
      ideal I = std(fetch(R0,I));
      intvec hi = hilb(I,1);
      setring R0;
      kill @r,@s;
   }
   if(variant == 3)
   {
      rl[1] = P;
      def @r = ring(rl);
      setring @r;
      int nvar@r = nvars(@r);
      intvec w;
      for(i = 1; i <= nvar@r; i++)
      {
         w[i] = deg(var(i));
      }
      w[nvar@r + 1] = 1;

      list hiRi = hilbRing(fetch(R0,I),w);
      intvec W = hiRi[2];
      def @s = hiRi[1];
      setring @s;

      Id(1) = std(Id(1));
      intvec hi = hilb(Id(1), 1, W);

      setring R0;
      kill @r,@s;
   }

//----------------------------  Call modular()  --------------------------------
   list args_modpStd;
   if(variant == 1 || variant == 3)
   {
      args_modpStd = list(I, variant, hi);
   }
   if(variant == 2 || variant == 4)
   {
      args_modpStd = list(I, variant);
   }

   ideal J;
   if(exactness)
   {
      J = modular("modpStd", args_modpStd, primeTest_std,
         deleteUnluckyPrimes_std, pTest_std, finalTest_std, modoptions);
   }
   else
   {
      J = modular("modpStd", args_modpStd, primeTest_std,
         deleteUnluckyPrimes_std, pTest_std, "", modoptions);
   }

   option(set, opt);
   return(J);
}
example
{ "EXAMPLE:"; echo = 2;
   ring R1 = 0,(x,y,z,t),dp;
   ideal I = 3x3+x2+1, 11y5+y3+2, 5z4+z2+4;
   ideal J = modStd(I);
   J;
   I = homog(I,t);
   J = modStd(I);
   J;

   ring R2 = 0,(x,y,z),ds;
   ideal I = jacob(x5+y6+z7+xyz);
   ideal J1 = modStd(I,1,0);
   J1;

   ring R3 = 0,x(1..4),lp;
   ideal I = cyclic(4);
   ideal J1 = modStd(I,1);
   ideal J2 = modStd(I,1,0);
   size(reduce(J1,J2));
   size(reduce(J2,J1));
}

static proc variant_std(alias ideal I, int h, int exactness, int p)
{
   def R0 = basering;
   list rl = ringlist(R0);

   if(!mixedTest())
   {
      if(h)
      {
         return(1);
      }
      else
      {
         string ordstr_R0 = ordstr(R0);
         int neg = 1 - attrib(R0,"global");

         if((find(ordstr_R0, "M") > 0) || (find(ordstr_R0, "a") > 0) || neg)
         {
            return(2);
         }
         else
         {
            string order;
            if(system("nblocks") <= 2)
            {
               if(find(ordstr_R0, "M") + find(ordstr_R0, "lp")
                                       + find(ordstr_R0, "rp") <= 0)
               {
                  order = "simple";
               }
            }

            if((order == "simple") || (size(rl) > 4))
            {
               return(2);
            }
            else
            {
               rl[1] = p;
               def @r = ring(rl);
               setring @r;

               def @s = changeord("dp");
               setring @s;
               ideal I = std(fetch(R0,I));
               if(dim(I) == 0)
               {
                  setring R0;
                  kill @r,@s;
                  return(4);
               }
               else
               {
                  setring R0;
                  kill @r,@s;
                  return(3);
               }
            }
         }
      }
   }
   else
   {
      if(exactness == 1) { return(0); }
      if(h)
      {
         return(1);
      }
      else
      {
         string ordstr_R0 = ordstr(R0);
         int neg = 1 - attrib(R0,"global");

         if((find(ordstr_R0, "M") > 0) || (find(ordstr_R0, "a") > 0) || neg)
         {
            return(2);
         }
         else
         {
            string order;
            if(system("nblocks") <= 2)
            {
               if(find(ordstr_R0, "M") + find(ordstr_R0, "lp")
                                       + find(ordstr_R0, "rp") <= 0)
               {
                  order = "simple";
               }
            }

            if((order == "simple") || (size(rl) > 4))
            {
               return(2);
            }
            else
            {
               return(3);
            }
         }
      }
   }
}

proc primeTest_std(int p, alias list args)
{
   int i,j;
   poly f;
   number cnt;   // content
   for(i = size(args[1]); i > 0; i--)
   {
      f = cleardenom(args[1][i]);
      if(f == 0) { return(0); }
      cnt = leadcoef(args[1][i])/leadcoef(f);
      if((numerator(cnt) mod p) == 0) { return(0); }
      if((denominator(cnt) mod p) == 0) { return(0); }
      for(j = size(f); j > 0; j--)
      {
         if((leadcoef(f[j]) mod p) == 0) { return(0); }
      }
   }
   return(1);
}

proc deleteUnluckyPrimes_std(list modresults)
{
   list T;
   list L;
   int ii;
   for (ii = size(modresults); ii > 0; ii--) {
       T[ii] = modresults[ii][1];
       L[ii] = modresults[ii][2];
   }
   int ho;
   list #;

   ho = ((ho)||(ord_test(basering) == -1));
   int j,k,c;
   intvec hl,hc;
   ideal cT,lT,cK;
   lT = lead(T[size(T)]);
   attrib(lT,"isSB",1);
   if(!ho)
   {
      for(j = 1; j < size(T); j++)
      {
         cT = lead(T[j]);
         attrib(cT,"isSB",1);
         if((size(reduce(cT,lT))!=0)||(size(reduce(lT,cT))!=0))
         {
            cK = cT;
            c++;
         }
      }
      if(c > size(T) div 2){ lT = cK; }
   }
   else
   {
      hl = hilb(lT,1);
      for(j = 1; j < size(T); j++)
      {
         cT = lead(T[j]);
         attrib(cT,"isSB",1);
         hc = hilb(cT,1);
         if(hl == hc)
         {
            for(k = 1; k <= size(lT); k++)
            {
               if(lT[k] < cT[k]) { lT = cT; c++; break; }
               if(lT[k] > cT[k]) { c++; break; }
            }
         }
         else
         {
            if(hc < hl){ lT = cT; hl = hilb(lT,1); c++; }
         }
      }
   }

   int addList;
   if(size(#) > 0) { list M = #; addList = 1; }
   j = 1;
   attrib(lT,"isSB",1);
   while((j <= size(T))&&(c > 0))
   {
      cT = lead(T[j]);
      attrib(cT,"isSB",1);
      if((size(reduce(cT,lT)) != 0)||(size(reduce(lT,cT)) != 0))
      {
         T = delete(T,j);
         if(j == 1)
         {
            L = L[2..size(L)];
            if(addList == 1) { M = M[2..size(M)]; }
         }
         else
         {
            if(j == size(L))
            {
               L = L[1..size(L)-1];
               if(addList == 1) { M = M[1..size(M)-1]; }
            }
            else
            {
               L = L[1..j-1],L[j+1..size(L)];
               if(addList == 1) { M = M[1..j-1],M[j+1..size(M)]; }
            }
         }
         j--;
      }
      j++;
   }

   for(j = 1; j <= size(L); j++)
   {
      L[j] = bigint(L[j]);
   }

   modresults = list();
   for (ii = size(T); ii > 0; ii--) {
       modresults[ii] = list();
       modresults[ii][1] = T[ii];
       modresults[ii][2] = L[ii];
   }
   return(modresults);

   if(addList == 0) { return(list(T,L,lT)); }
   if(addList == 1) { return(list(T,L,M,lT)); }
}

proc pTest_std(string command, list args, def result, list primes)
{
   ideal I = args[1];
   ideal J = result;
   list L;
   int pp = prime(2147483647);
   while (pp >= primes[1]) {
       L[size(L)+1] = pp;
       pp = prime(pp-1);
   }
   int variant = 2;
   list #;

   int i,j,k,p;
   def R = basering;
   list r = ringlist(R);

   while(!j)
   {
      j = 1;
      p = prime(random(1000000000,2134567879));
      for(i = 1; i <= size(L); i++)
      {
         if(p == L[i]) { j = 0; break; }
      }
      if(j)
      {
         for(i = 1; i <= ncols(I); i++)
         {
            for(k = 2; k <= size(I[i]); k++)
            {
               if((denominator(leadcoef(I[i][k])) mod p) == 0) { j = 0; break; }
            }
            if(!j){ break; }
         }
      }
      if(j)
      {
         if(!primeTest_std(p, args)) { j = 0; }
      }
   }
   r[1] = p;
   def @R = ring(r);
   setring @R;
   ideal I = imap(R,I);
   ideal J = imap(R,J);
   attrib(J,"isSB",1);

   int t = timer;
   j = 1;
   if(isIncluded(I,J) == 0) { j = 0; }

   if(printlevel >= 11)
   {
      "isIncluded(I,J) takes "+string(timer - t)+" seconds";
      "j = "+string(j);
   }

   t = timer;
   if(j)
   {
      if(size(#) > 0)
      {
         // caution! design of modpStd has changed.
         // This has to be changed later on. For the moment,
         // this case never happens anyway.
         // ideal K = modpStd(I,p,variant,#[1])[1];
      }
      else
      {
         ideal K = groebner(I);
      }
      t = timer;
      if(isIncluded(J,K) == 0) { j = 0; }

      if(printlevel >= 11)
      {
         "isIncluded(J,K) takes "+string(timer - t)+" seconds";
         "j = "+string(j);
      }
   }
   setring R;
   return(j);
}

proc finalTest_std(string command, list args, ideal result)
{
    ideal J = result;
    ideal I = args[1];
    int n1 = 8;
    int sizeTest;
    ideal K;

    attrib(J,"isSB",1);

    sizeTest = 1 - isIncluded(I,J,n1);

    if(sizeTest == 0)
    {
        K = std(J);

        if(size(reduce(K,J)) == 0)
        {
            return(1);
        }
    }

    return(0);
}

////////////////////////////////////////////////////////////////////////////////

proc modS(ideal I, list L, list #)
"USAGE:  modS(I,L); I ideal, L intvec of primes
         if size(#)>0 std is used instead of groebner
RETURN:  an ideal which is with high probability a standard basis
NOTE:    This procedure is designed for fast experiments.
         It is not tested whether the result is a standard basis.
         It is not tested whether the result generates I.
EXAMPLE: example modS; shows an example
"
{
   int j;
   bigint N = 1;
   def R0 = basering;
   ideal J;
   list T;
   list rl = ringlist(R0);
   if((npars(R0)>0) || (rl[1]>0))
   {
      ERROR("Characteristic of basering should be zero.");
   }
   for(j = 1; j <= size(L); j++)
   {
      N = N*L[j];
      rl[1] = L[j];
      def @r = ring(rl);
      setring @r;
      ideal I = fetch(R0,I);
      if(size(#) > 0)
      {
         I = std(I);
      }
      else
      {
         I = groebner(I);
      }
      setring R0;
      T[j] = fetch(@r,I);
      kill @r;
   }
   L = deleteUnluckyPrimes(T,L,homog(I));
   // unlucky if and only if the leading ideal is wrong
   J = farey(chinrem(L[1],L[2]),N);
   attrib(J,"isSB",1);
   return(J);
}
example
{ "EXAMPLE:"; echo = 2;
   list L = 3,5,11,13,181,32003;
   ring r = 0,(x,y,z,t),dp;
   ideal I = 3x3+x2+1,11y5+y3+2,5z4+z2+4;
   I = homog(I,t);
   ideal J = modS(I,L);
   J;
}

////////////////////////////////////////////////////////////////////////////////

proc modHenselStd(ideal I, list #)
"USAGE:  modHenselStd(I);
RETURN:  a standard basis of I;
NOTE:    The procedure computes a standard basis of I (over the rational
         numbers) by using  modular computations and Hensellifting.
         For further experiments see procedure modS.
EXAMPLE: example modHenselStd; shows an example
"
{
   int i,j;

   bigint p = 2134567879;
   if(size(#)!=0) { p=#[1]; }
   while(!primeTest(I,p))
   {
      p = prime(random(2000000000,2134567879));
   }

   def R = basering;
   module F,PrevG,PrevZ,Z2;
   ideal testG,testG1,G1,G2,G3,Gp;
   list L = p;
   list rl = ringlist(R);
   rl[1] = int(p);

   def S = ring(rl);
   setring S;
   intvec opt = option(get);
   option(redSB);
   module Z,M,Z2;
   ideal I = imap(R,I);
   ideal Gp,G1,G2,G3;
   Gp,Z = liftstd1(I);
   attrib(Gp,"isSB",1);
   module ZZ = syz(I);
   attrib(ZZ,"isSB",1);
   Z = reduce(Z,ZZ);

   setring R;
   Gp = imap(S,Gp);
   PrevZ = imap(S,Z);
   PrevG = module(Gp);
   F = module(I);
   testG = farey(Gp,p);
   attrib(testG,"isSB",1);
   while(1)
   {
      i++;
      G1 = ideal(1/(p^i) * sum(F*PrevZ,(-1)*PrevG));
      setring S;
      G1 = imap(R,G1);
      G2 = reduce(G1,Gp);
      G3 = sum(G1,(-1)*G2);
      M = lift(Gp,G3);
      Z2 = (-1)*Z*M;

      setring R;
      G2 = imap(S,G2);
      Z2 = imap(S,Z2);
      PrevG = sum(PrevG, module(p^i*G2));
      PrevZ = sum(PrevZ, multiply(poly(p^i),Z2));
      testG1 = farey(ideal(PrevG),p^(i+1));
      attrib(testG1,"isSB",1);
      if(size(reduce(testG1,testG)) == 0)
      {
         if(size(reduce(I,testG1)) == 0)       // I is in testG1
         {
            if(pTestSB(I,testG1,L,2))
            {
               G3 = std(testG1);               // testG1 is SB
               if(size(reduce(G3,testG1)) == 0)
               {
                  option(set, opt);
                  return(G3);
               }
            }
         }
      }
      testG = testG1;
      attrib(testG,"isSB",1);
   }
}
example
{ "EXAMPLE:"; echo = 2;
   ring r = 0,(x,y,z),dp;
   ideal I = 3x3+x2+1,11y5+y3+2,5z4+z2+4;
   ideal J = modHenselStd(I);
   J;
}

////////////////////////////////////////////////////////////////////////////////

static proc sum(list #)
{
   if(typeof(#[1])=="ideal")
   {
      ideal M;
   }
   else
   {
      module M;
   }

   int i;
   for(i = 1; i <= ncols(#[1]); i++) { M[i] = #[1][i] + #[2][i]; }
   return(M);
}

////////////////////////////////////////////////////////////////////////////////

static proc multiply(poly p, list #)
{
   if(typeof(#[1])=="ideal")
   {
      ideal M;
   }
   else
   {
      module M;
   }

   int i;
   for(i = 1; i <= ncols(#[1]); i++) { M[i] = p * #[1][i]; }
   return(M);
}


////////////////////////////// further examples ////////////////////////////////

/*
ring r = 0, (x,y,z), lp;
poly s1 = 5x3y2z+3y3x2z+7xy2z2;
poly s2 = 3xy2z2+x5+11y2z2;
poly s3 = 4xyz+7x3+12y3+1;
poly s4 = 3x3-4y3+yz2;
ideal i =  s1, s2, s3, s4;

ring r = 0, (x,y,z), lp;
poly s1 = 2xy4z2+x3y2z-x2y3z+2xyz2+7y3+7;
poly s2 = 2x2y4z+x2yz2-xy2z2+2x2yz-12x+12y;
poly s3 = 2y5z+x2y2z-xy3z-xy3+y4+2y2z;
poly s4 = 3xy4z3+x2y2z-xy3z+4y3z2+3xyz3+4z2-x+y;
ideal i =  s1, s2, s3, s4;

ring r = 0, (x,y,z), lp;
poly s1 = 8x2y2 + 5xy3 + 3x3z + x2yz;
poly s2 = x5 + 2y3z2 + 13y2z3 + 5yz4;
poly s3 = 8x3 + 12y3 + xz2 + 3;
poly s4 = 7x2y4 + 18xy3z2 +  y3z3;
ideal i = s1, s2, s3, s4;

int n = 6;
ring r = 0,(x(1..n)),lp;
ideal i = cyclic(n);
ring s = 0, (x(1..n),t), lp;
ideal i = imap(r,i);
i = homog(i,t);

ring r = 0, (x(1..4),s), (dp(4),dp);
poly s1 = 1 + s^2*x(1)*x(3) + s^8*x(2)*x(3) + s^19*x(1)*x(2)*x(4);
poly s2 = x(1) + s^8 *x(1)* x(2)* x(3) + s^19* x(2)* x(4);
poly s3 = x(2) + s^10*x(3)*x(4) + s^11*x(1)*x(4);
poly s4 = x(3) + s^4*x(1)*x(2) + s^19*x(1)*x(3)*x(4) +s^24*x(2)*x(3)*x(4);
poly s5 = x(4) + s^31* x(1)* x(2)* x(3)* x(4);
ideal i =  s1, s2, s3, s4, s5;

ring r = 0, (x,y,z), ds;
int a = 16;
int b = 15;
int c = 4;
int t = 1;
poly f = x^a+y^b+z^(3*c)+x^(c+2)*y^(c-1)+x^(c-1)*y^(c-1)*z3
         +x^(c-2)*y^c*(y2+t*x)^2;
ideal i = jacob(f);

ring r = 0, (x,y,z), ds;
int a = 25;
int b = 25;
int c = 5;
int t = 1;
poly f = x^a+y^b+z^(3*c)+x^(c+2)*y^(c-1)+x^(c-1)*y^(c-1)*z3
         +x^(c-2)*y^c*(y2+t*x)^2;
ideal i = jacob(f),f;

ring r = 0, (x,y,z), ds;
int a = 10;
poly f = xyz*(x+y+z)^2 +(x+y+z)^3 +x^a+y^a+z^a;
ideal i = jacob(f);

ring r = 0, (x,y,z), ds;
int a = 6;
int b = 8;
int c = 10;
int alpha = 5;
int beta = 5;
int t = 1;
poly f = x^a+y^b+z^c+x^alpha*y^(beta-5)+x^(alpha-2)*y^(beta-3)
         +x^(alpha-3)*y^(beta-4)*z^2+x^(alpha-4)*y^(beta-4)*(y^2+t*x)^2;
ideal i = jacob(f);
*/

